{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Transition = _interopRequireDefault(require(\"react-transition-group/Transition\"));\n\nvar _CSSTransition = _interopRequireDefault(require(\"react-transition-group/CSSTransition\"));\n\nvar _PropTypes = require(\"react-transition-group/utils/PropTypes\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction areChildrenDifferent(oldChildren, newChildren) {\n  return oldChildren !== newChildren;\n}\n\nfunction differentChildrenNeedAnimation(oldChildren, newChildren) {\n  if (!oldChildren || !newChildren) {\n    return true;\n  }\n\n  if (!_react.default.isValidElement(oldChildren) || !_react.default.isValidElement(newChildren)) {\n    // eslint-disable-next-line no-console\n    console.warn('[next-page-transitions] PageTransition child is not a valid React component');\n    return true;\n  }\n\n  if (oldChildren.key == null || newChildren.key == null) {\n    // eslint-disable-next-line no-console\n    console.warn('[next-page-transitions] PageTransition child does not have a key');\n    return true;\n  }\n\n  return oldChildren.key !== newChildren.key;\n}\n\nfunction buildClassName(className, state) {\n  switch (state) {\n    case 'enter':\n      return \"\".concat(className, \"-enter\");\n\n    case 'entering':\n      return \"\".concat(className, \"-enter \").concat(className, \"-enter-active\");\n\n    case 'entered':\n      return \"\".concat(className, \"-enter-done\");\n\n    case 'exit':\n      return \"\".concat(className, \"-exit\");\n\n    case 'exiting':\n      return \"\".concat(className, \"-exit \").concat(className, \"-exit-active\");\n\n    case 'exited':\n      return \"\".concat(className, \"-exit-done\");\n\n    default:\n      return '';\n  }\n}\n\nfunction shouldDelayEnter(children) {\n  return _react.default.isValidElement(children) && children.type.pageTransitionDelayEnter;\n}\n\nfunction makeStateUpdater(state, otherProps) {\n  return function updateState() {\n    this.setState(_objectSpread({\n      state: state\n    }, otherProps));\n  };\n}\n\nvar PageTransition =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PageTransition, _React$Component);\n\n  function PageTransition(props) {\n    var _this;\n\n    _classCallCheck(this, PageTransition);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageTransition).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onEntering\", makeStateUpdater('entering').bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onEntered\", makeStateUpdater('entered').bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onExiting\", makeStateUpdater('exiting').bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onExited\", makeStateUpdater('exited', {\n      renderedChildren: null\n    }).bind(_assertThisInitialized(_this)));\n\n    var children = props.children;\n    _this.state = {\n      state: props.skipInitialTransition ? 'init' : 'enter',\n      isIn: !shouldDelayEnter(children),\n      currentChildren: children,\n      nextChildren: null,\n      renderedChildren: children,\n      showLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(PageTransition, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          monkeyPatchScrolling = _this$props.monkeyPatchScrolling;\n\n      if (shouldDelayEnter(children)) {\n        this.setState({\n          timeoutId: this.startEnterTimer()\n        });\n      }\n\n      if (monkeyPatchScrolling && typeof window !== 'undefined') {\n        // Forgive me for what I'm about to do\n        this.originalScrollTo = window.scrollTo;\n        this.disableScrolling = false;\n\n        window.scrollTo = function () {\n          if (_this2.disableScrolling) return;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this2.originalScrollTo.apply(window, args);\n        };\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$state = this.state,\n          currentChildren = _this$state.currentChildren,\n          renderedChildren = _this$state.renderedChildren,\n          nextChildren = _this$state.nextChildren,\n          isIn = _this$state.isIn,\n          state = _this$state.state;\n      var children = this.props.children;\n      var _this$state2 = this.state,\n          timeoutId = _this$state2.timeoutId,\n          showLoading = _this$state2.showLoading;\n      var hasNewChildren = areChildrenDifferent(currentChildren, children);\n      var needsTransition = areChildrenDifferent(renderedChildren, children);\n      var shouldAnimateTransition = needsTransition && differentChildrenNeedAnimation(renderedChildren, children);\n\n      if (isIn && needsTransition && !shouldAnimateTransition) {\n        // We need to update our rendered children, but we shouldn't animate them.\n        // This will occur when the key prop on our children stays the same but\n        // the children themselves change. This can happen in a lot of cases: HMR,\n        // a rerender due to a Redux state change, a Router.push to the current page,\n        // etc. In this case, we'll just immediately flush the children to be\n        // rendered.\n        this.setState({\n          currentChildren: children,\n          renderedChildren: children\n        });\n      } else if (hasNewChildren) {\n        // We got a new set of children while we were transitioning some in\n        // Immediately start transitioning out this component and update the next\n        // component\n        this.setState({\n          isIn: false,\n          nextChildren: children,\n          currentChildren: children\n        });\n\n        if (timeoutId) {\n          clearTimeout(timeoutId);\n        }\n      } else if (needsTransition && !isIn && (state === 'enter' || state === 'exited')) {\n        if (shouldDelayEnter(nextChildren)) {\n          // Wait for the ready callback to actually transition in, but still\n          // mount the component to allow it to start loading things\n          this.setState({\n            renderedChildren: nextChildren,\n            nextChildren: null,\n            timeoutId: this.startEnterTimer()\n          });\n        } else {\n          // No need to wait, mount immediately\n          this.setState({\n            isIn: true,\n            renderedChildren: nextChildren,\n            nextChildren: null\n          });\n        }\n      } else if (prevState.showLoading && !showLoading) {\n        // We hid the loading indicator; now that that change has been flushed to\n        // the DOM, we can now bring in the next component!\n        this.setState({\n          isIn: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.originalScrollTo && typeof window !== 'undefined') {\n        window.scrollTo = this.originalScrollTo;\n      }\n\n      var timeoutId = this.state.timeoutId;\n      if (timeoutId) clearTimeout(timeoutId);\n    }\n  }, {\n    key: \"onEnter\",\n    value: function onEnter() {\n      // It's safe to reenable scrolling now\n      this.disableScrolling = false;\n      this.setState({\n        state: 'enter',\n        showLoading: false\n      });\n    }\n  }, {\n    key: \"onExit\",\n    value: function onExit() {\n      // Disable scrolling until this component has unmounted\n      this.disableScrolling = true;\n      this.setState({\n        state: 'exit'\n      });\n    }\n  }, {\n    key: \"onChildLoaded\",\n    value: function onChildLoaded() {\n      var _this$state3 = this.state,\n          timeoutId = _this$state3.timeoutId,\n          showLoading = _this$state3.showLoading;\n\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n\n      if (showLoading) {\n        // We'll hide the loader first and animate in the page on the next tick\n        this.setState({\n          showLoading: false\n        });\n      } else {\n        // We can immediately bring in the next page!\n        this.setState({\n          isIn: true\n        });\n      }\n    }\n  }, {\n    key: \"startEnterTimer\",\n    value: function startEnterTimer() {\n      var _this3 = this;\n\n      var loadingDelay = this.props.loadingDelay;\n      return setTimeout(function () {\n        _this3.setState({\n          showLoading: true\n        });\n      }, loadingDelay);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props2 = this.props,\n          Tag = _this$props2.tag,\n          timeout = _this$props2.timeout,\n          loadingComponent = _this$props2.loadingComponent,\n          loadingCallbackName = _this$props2.loadingCallbackName,\n          classNames = _this$props2.classNames,\n          loadingClassNames = _this$props2.loadingClassNames,\n          loadingTimeout = _this$props2.loadingTimeout,\n          skipInitialTransition = _this$props2.skipInitialTransition;\n      var _this$state4 = this.state,\n          children = _this$state4.renderedChildren,\n          state = _this$state4.state,\n          isIn = _this$state4.isIn,\n          showLoading = _this$state4.showLoading;\n\n      if (['entering', 'exiting', 'exited'].indexOf(state) !== -1) {\n        // Need to reflow!\n        // eslint-disable-next-line no-unused-expressions\n        if (document.body) document.body.scrollTop;\n      }\n\n      var hasLoadingComponent = !!loadingComponent;\n      var containerClassName = buildClassName(classNames, state);\n      return _react.default.createElement(_react.Fragment, null, _react.default.createElement(_Transition.default, {\n        timeout: timeout,\n        in: isIn,\n        appear: !skipInitialTransition,\n        onEnter: function onEnter() {\n          return _this4.onEnter();\n        },\n        onEntering: function onEntering() {\n          return _this4.onEntering();\n        },\n        onEntered: function onEntered() {\n          return _this4.onEntered();\n        },\n        onExit: function onExit() {\n          return _this4.onExit();\n        },\n        onExiting: function onExiting() {\n          return _this4.onExiting();\n        },\n        onExited: function onExited() {\n          return _this4.onExited();\n        }\n      }, _react.default.createElement(Tag, {\n        className: containerClassName\n      }, children && _react.default.cloneElement(children, _defineProperty({}, loadingCallbackName, function () {\n        return _this4.onChildLoaded();\n      })))), hasLoadingComponent && _react.default.createElement(_CSSTransition.default, {\n        in: showLoading,\n        mountOnEnter: true,\n        unmountOnExit: true,\n        appear: true,\n        classNames: loadingClassNames,\n        timeout: loadingTimeout\n      }, loadingComponent));\n    }\n  }]);\n\n  return PageTransition;\n}(_react.default.Component); // We do weird things with timeoutsShape because these are omitted in some\n// environments\n// See https://github.com/reactjs/react-transition-group/pull/448\n\n\nPageTransition.propTypes = {\n  tag: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string, _propTypes.default.shape({\n    $$typeof: _propTypes.default.symbol,\n    render: _propTypes.default.func\n  })]),\n  children: _propTypes.default.node.isRequired,\n  classNames: _propTypes.default.string.isRequired,\n\n  /* eslint-disable react/require-default-props */\n  timeout: function timeout(props) {\n    if (_PropTypes.timeoutsShape) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return _PropTypes.timeoutsShape.isRequired.apply(_PropTypes.timeoutsShape, [props].concat(args));\n    }\n\n    return undefined;\n  },\n  loadingComponent: _propTypes.default.element,\n  loadingDelay: _propTypes.default.number,\n  loadingCallbackName: _propTypes.default.string,\n\n  /* eslint-disable react/require-default-props */\n  loadingTimeout: function loadingTimeout(props) {\n    if (_PropTypes.timeoutsShape && props.loadingComponent) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      return _PropTypes.timeoutsShape.isRequired.apply(_PropTypes.timeoutsShape, [props].concat(args));\n    }\n\n    return undefined;\n  },\n  loadingClassNames: function loadingClassNames(props) {\n    var pt = _propTypes.default.string;\n    if (props.loadingTimeout) pt = pt.isRequired;\n\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /* eslint-enable react/require-default-props */\n  monkeyPatchScrolling: _propTypes.default.bool,\n  skipInitialTransition: _propTypes.default.bool\n};\nPageTransition.defaultProps = {\n  tag: 'div',\n  loadingComponent: null,\n  loadingCallbackName: 'pageTransitionReadyToEnter',\n  loadingDelay: 500,\n  monkeyPatchScrolling: false,\n  skipInitialTransition: false\n};\nvar _default = PageTransition;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}